==================================================================================================================================
package com.noetic.upa.enums;

import java.util.stream.Stream;

public enum PayDtoType {
	PAY("PayRequestDTO", true),
	PAY_DCC("PayDccRequestDTO", true),
	PAY_BY_TOKEN("PayBySavedCardDTO", false),
	DCC_QUOTE("CurrencyQuoteDccRequestDTO", false),
	DCC_QUOTE_BY_TOKEN("CurrencyQuoteDccSavedCardsRequestDTO", false),
	VERIFY_3DS("VerifyEnrolled3dSecureRequestDTO", false),
	VERIFY_3DS_BY_TOKEN("VerifyEnrolled3dSecureSavedCardRequestDTO", false),
	MERCHANT_DATA("MerchantData", true),
	PAYMENT_METHOD("SaveCardWithPayerInfoRequestDTO", false),
	SAVE_TOKEN_WITH_PAYER_INFO("PaymentMethodDTO", false);
	
	private final String payDtoType;
	private final Boolean isCvnPresent;

	

	private PayDtoType(String payDtoType, Boolean isCvnPresent) {
		this.payDtoType = payDtoType;
		this.isCvnPresent = isCvnPresent;
	}

	public String getPayDtoType() {
		return payDtoType;
	}

	public Boolean getIsCvnPresent() {
		return isCvnPresent;
	}

	public static Stream<PayDtoType> stream() {
		return Stream.of(PayDtoType.values());
	}

}

==================================================================================================================================

package com.noetic.upa.aspect;

import java.lang.reflect.Field;
import java.util.List;
import java.util.stream.Collectors;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.noetic.exception.CryptoConfigException;
import com.noetic.upa.enums.PayDtoType;
import com.noetic.upa.util.CryptoConfigUtil;

/**
 * Created By Ranga Lankathilaka Sep 29, 2020
 */
@Aspect
@Component
public class AspectAdviser {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(AspectAdviser.class);
	public static final String ASPECT_ADVISER_ERROR_STRING = "Error message: {}, cause: {}";
	
	@Autowired
	private CryptoConfigUtil cryptoConfigUtil;

	@Around("execution(* com.noetic.upa.service.ThreecPaymentServiceImpl.*(..)) "
			+ "|| execution(* com.noetic.upa.service.ElavonRealexServiceImpl.*(..))")
	  public Object aroundClassLevel(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {
		LOGGER.info("Decrypting process is being executed");
	    
	    Object[] args = proceedingJoinPoint.getArgs();
		for (Object object : args) {
	    	String className = object.getClass().getSimpleName();
	    	List<PayDtoType> collect = PayDtoType.stream().collect(Collectors.toList());
			collect.forEach(patDtoType -> {
				 
				if ((patDtoType.getPayDtoType()).equals(className)) {
					Class<?> clazz = object.getClass();
					Field isEncrypt = null;
					try {
						isEncrypt = clazz.getSuperclass().getDeclaredField("isEncrypt");
						isEncrypt.setAccessible(true);
						Boolean isEncryptValue = (Boolean) isEncrypt.get(object);
						if (isEncryptValue) {
							
							//systemId
							Field systemId = null;
							systemId = clazz.getSuperclass().getDeclaredField("systemId");
							systemId.setAccessible(true);
							Object systemIdValue = systemId.get(object);
							
							if (patDtoType.getIsCvnPresent()) {
								//cvn
								Field cvn = null;
								cvn = clazz.getDeclaredField("cvn");
								cvn.setAccessible(true);
								Object cvnValue = cvn.get(object);

								if (cvnValue != null) {
									String aesDecryptedCvn = cryptoConfigUtil
									.aesDecrypt(String.valueOf(cvnValue),
								     String.valueOf(systemIdValue));
									cvn.set(object, aesDecryptedCvn);
								}
							}
							
							
							//card detail Dto
							Field cardDetails = null;
							cardDetails = clazz.getDeclaredField("cardDetails");
							cardDetails.setAccessible(true);
							Object cardDetailObjectValue = cardDetails.get(object);
							//card number
							Field cardNumber = null;
							cardNumber = cardDetailObjectValue.getClass()
									.getDeclaredField("cardNumber");
							cardNumber.setAccessible(true);
							Object cardNumberValue = cardNumber.get(cardDetailObjectValue);
							String aesDecryptedCardNumber = cryptoConfigUtil
									.aesDecrypt(String.valueOf(cardNumberValue),
									String.valueOf(systemIdValue));
							cardNumber.set(cardDetailObjectValue, aesDecryptedCardNumber);
							cardDetails.set(object, (Object) cardDetailObjectValue);
						} 
						
					} catch (NoSuchFieldException | SecurityException e) {
						LOGGER.error(ASPECT_ADVISER_ERROR_STRING, e.getMessage(), e.getCause());
			            throw new RuntimeException(e.getMessage(), e.getCause());
					} catch (IllegalArgumentException | IllegalAccessException e) {
						LOGGER.error(ASPECT_ADVISER_ERROR_STRING, e.getMessage(), e.getCause());
			            throw new RuntimeException(e.getMessage(), e.getCause());
					} catch (CryptoConfigException e) {
						LOGGER.error(ASPECT_ADVISER_ERROR_STRING, e.getMessage(), e.getCause());
			            throw new RuntimeException(e.getMessage(), e.getCause());
					} 

				}

			});

		}
	    
		Object proceed = proceedingJoinPoint.proceed(args);
		LOGGER.info("Decrypting process is finished");
		return proceed;
	  }
}

