http://localhost:8080/v1/email-booking/8ff9c0b2-1ba3-4d6e-a7e1-388e29016cbd



package uk.co.imperial.route;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.jms.JMSException;
import javax.security.auth.login.AccountNotFoundException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.shomei.micros.AccountClient;
import com.shomei.micros.ClientException;
import com.shomei.micros.Micros.AccountProfile;

import net.sitemorph.auth.LoginModel.Session;
import net.sitemorph.protostore.CrudException;
import net.sitemorph.web.request.Request;
import net.sitemorph.web.request.RequestProfile;
import net.sitemorph.web.request.ResourceNotFoundException;
import uk.co.imperial.helper.Resolver;
import uk.co.imperial.helper.SharedUtils;
import uk.co.imperial.model.AuthorisationException;
import uk.co.imperial.model.BookingJson;
import uk.co.imperial.model.ErrorMessage;
import uk.co.imperial.model.ErrorMessage.ErrorCode;
import uk.co.imperial.model.Hotel.RuntimeConfig;
import uk.co.imperial.model.PersonJson;
import uk.co.imperial.model.RoomJson;
import uk.co.imperial.model.cro.IntermediateBookingJson;
import uk.co.imperial.model.cro.IntermediateBookingWebhookJson;
import uk.co.imperial.route.config.WebConfig;
import uk.co.imperial.service.BookingManager;
import uk.co.mandrill.MandrillApi;
import uk.co.mandrill.model.MandrillMessage;
import uk.co.mandrill.model.MandrillMessage.MergeVar;
import uk.co.mandrill.model.MandrillMessage.Recipient;
import uk.co.mandrill.view.MandrillApiError;
import uk.co.mandrill.view.MandrillMessageStatus;

/**
 * @author Ranga Lankathilaka created on March 17, 2019
 */

public class EmailBookingEndPoint extends HttpServlet {

	private static final long serialVersionUID = 1L;
	private final static Logger LOGGER = LoggerFactory.getLogger(EmailBookingEndPoint.class);
	IntermediateBookingJson intermediateBooking;
	IntermediateBookingWebhookJson webHookJson;
	SiteConfig config;

	@Override
	public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {

		SiteConfig config = ConfigFactory.forRequest(request);
		Request page = Request.newPageRequest(config).setContext(getServletContext()).setResponse(response)
				.setRequest(request).setProfile(RequestProfile.JSON).withBasicAuth();

		if (page.cantContinue()) {
			ErrorMessage.send(page, ErrorCode.AUTHORISATION_REQUIRED, "error.message.api.auth.failed");
			page.close();
			return;
		}

		if (StopTheWorld.yes(page, config)) {
			LOGGER.info("API currently disabled");
			return;
		}

		if (Resolver.notAuthorised(page, config)) {
			ErrorMessage.send(page, ErrorCode.AUTHORISATION_REQUIRED, "error.message.api.auth.failed");
			return;
		}

		if (null == page.getPathAsId() || WebConfig.CREATE_PATH.equals(page.getPathAsId())) {
			ErrorMessage.send(page, ErrorCode.RESOURCE_NOT_FOUND, "error.message.booking.id.missing");
			page.close();
			return;
		}
		BookingJson result = null;
		try {
//			sendEmail(page, config, page.getPathAsId(),
//					JsonUtil.convertObjectToJsonString(webHookJson.getBooking().getPayload()));

			sendEmail(page, config, page.getPathAsId());

			WebConfig.checkAccountAccess(result.getAccountId(), page);
			result.render(page);
		} catch (CrudException e) {
			LOGGER.error("Storage error reading basket", e);
			ErrorMessage.send(page, ErrorCode.SERVER_ERROR, "error.message.storage");
		} catch (AuthorisationException e) {
			LOGGER.error("Insufficient permissions to complete the request " + "Account id = {} Booking id = {}",
					result.getAccountId(), result.getBookingId(), e);
			ErrorMessage.send(page, ErrorCode.AUTHORISATION_REQUIRED, "error.message.booking.auth.failed");
		} catch (IOException e) {
			LOGGER.error("Error reading booking", e);
			ErrorMessage.send(page, ErrorCode.SERVER_ERROR, "error.message.booking.io");
		} catch (IllegalArgumentException e) {
			LOGGER.error("Cant process request: {}", e.getMessage());
			ErrorMessage.send(page, ErrorCode.INVALID_REQUEST, "error.message.request.failed",
					"error.desc.booking.invalid.argument");
		} catch (ResourceNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (MandrillApiError e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JMSException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClientException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (AccountNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		page.close();
	}

	// BookingJson

	/**
	 * 
	 * @param page
	 * @param config
	 * @param bookingId
	 * @return
	 * @throws CrudException
	 * @throws ResourceNotFoundException
	 * @throws IOException
	 * @throws MandrillApiError
	 * @throws JMSException
	 * @throws AuthorisationException
	 * @throws AccountNotFoundException
	 * @throws ClientException
	 */
	private void sendEmail(Request page, SiteConfig config, String bookingId)
			throws CrudException, ResourceNotFoundException, IOException, MandrillApiError, JMSException,
			AuthorisationException, AccountNotFoundException, ClientException {

		BookingManager bookingManager = BookingManager.newBuilder().setRequest(page).setConfig(config).build();
		// populate booking
		BookingJson readBooking = bookingManager.readBooking(bookingId);
		LOGGER.info("Account Id >>>>>>>>>>>" + readBooking.getAccountId());

		// get account detail

		Session session = WebConfig.getSession(page);
		String accountId = readBooking.getAccountId();

		AccountClient client = config.getAccountClient();
		AccountProfile profile = client.getAccount(accountId);
		LOGGER.info("username >>>>>>>>>>>" + profile.getUsername());

		// room guest detail

		RoomJson[] rooms = (readBooking.getStays()[0]).getRooms();
		PersonJson[] guests = rooms[0].getGuests();

		Map<String, RuntimeConfig> croConfirmationEmail = SharedUtils.getRuntimeConfig(config, "CRO_CONFIRM_EMAIL");
		String apiKey = croConfirmationEmail.get("MANDRILL_API_KEY").getConfigValue();
		MandrillApi api = new MandrillApi(apiKey);
		MandrillMessage message = new MandrillMessage();
		message.setSubject(croConfirmationEmail.get("SUBJECT").getConfigValue());
		message.setFrom_email(croConfirmationEmail.get("FROM_EMAIL").getConfigValue());
		message.setFrom_name(croConfirmationEmail.get("FROM_NAME").getConfigValue());
		message.setImportant(Boolean.valueOf(croConfirmationEmail.get("IMPORTANT").getConfigValue()));
		message.setTrack_opens(Boolean.valueOf(croConfirmationEmail.get("TRACK_OPENS").getConfigValue()));
		message.setTrack_clicks(Boolean.valueOf(croConfirmationEmail.get("TRACK_CLICKS").getConfigValue()));
		message.setMerge(Boolean.valueOf(croConfirmationEmail.get("MERGE").getConfigValue()));
		message.setMerge_language(croConfirmationEmail.get("MERGE_LANGUAGE").getConfigValue());
		List<String> tags = new ArrayList<String>();
		tags.add(croConfirmationEmail.get("TAG_1").getConfigValue());
		message.setTags(tags);
		message.setSubaccount(croConfirmationEmail.get("SUB_ACCOUNT").getConfigValue());

		// Set recipient
		LOGGER.info("Set recipient ....................");
		ArrayList<Recipient> recipients = new ArrayList<Recipient>();
		Recipient recipient = new Recipient();
		recipient.setEmail(profile.getUsername());
		recipient.setName(profile.getFirstName() + " " + profile.getLastName());
		recipients.add(recipient);
		message.setTo(recipients);
		message.setPreserve_recipients(true);

		// Set global merge vars
		LOGGER.info("Set global merge vars ....................");
		List<MergeVar> mergeVars = new ArrayList<>();
		MergeVar name = new MergeVar();
		name.setName("reservationNumber");
		name.setContent("test");
		mergeVars.add(name);

		// get guest in room
		for (int rm = 0; rm < rooms.length; rm++) {
			PersonJson[] roomGuest = rooms[rm].getGuests();
			String roomTypeDescription = rooms[rm].getRoomTypeDescription();

			String roomGuestName = " ";
			for (int rg = 0; rg < roomGuest.length; rg++) {
				String fullName = roomGuest[rg].getFirstName() + " " + roomGuest[rg].getLastName();
				roomGuestName += ", " + fullName;

			}
			LOGGER.info("Room Number  >>>>>>>>>>> " + rm);
			LOGGER.info("Room Guest names  >>>>>>>>>>> " + roomGuestName.substring(3));
			LOGGER.info("Room Type  >>>>>>>>>>> " + roomTypeDescription);
			LOGGER.info("Hotel:  >>>>>>>>>>> " + rooms[rm].getHotelCode());

			name = new MergeVar();
			name.setName("roomNumber");
			name.setContent(rm);
			mergeVars.add(name);

			name = new MergeVar();
			name.setName("guestName");
			name.setContent(roomGuestName.substring(3));
			mergeVars.add(name);

			name = new MergeVar();
			name.setName("roomType");
			name.setContent(roomTypeDescription);
			mergeVars.add(name);

			name = new MergeVar();
			name.setName("hotel");
			name.setContent(rooms[rm].getHotelCode());
			mergeVars.add(name);

		}
		LOGGER.info("Reservation number:  >>>>>>>>>>> " + readBooking.getBookingId());
		LOGGER.info("Transaction ID:  >>>>>>>>>>> " + readBooking.getPayments()[0].getTransactionId());
		LOGGER.info("Date: >>>>>>>>>>> " + readBooking.getPayments()[0].getCreated());
		LOGGER.info("Amount: >>>>>>>>>>> " + readBooking.getPayments()[0].getAmount());
		LOGGER.info("Card Type: >>>>>>>>>>> " + readBooking.getPayments()[0].getCardType());
		LOGGER.info("Card Number: >>>>>>>>>>> " + readBooking.getPayments()[0].getLastCardDigits());
		LOGGER.info("Check in:  >>>>>>>>>>> " + readBooking.getStays()[0].getCheckIn());
		LOGGER.info("Check out:  >>>>>>>>>>> " + readBooking.getStays()[0].getCheckOut());

		name = new MergeVar();
		name.setName("reservationNumber");
		name.setContent(readBooking.getBookingId());
		mergeVars.add(name);

		name = new MergeVar();
		name.setName("transactionID");
		name.setContent(readBooking.getPayments()[0].getTransactionId());
		mergeVars.add(name);

		name = new MergeVar();
		name.setName("date");
		name.setContent(readBooking.getPayments()[0].getCreated());
		mergeVars.add(name);

		name = new MergeVar();
		name.setName("amount");
		name.setContent(readBooking.getPayments()[0].getAmount());
		mergeVars.add(name);

		name = new MergeVar();
		name.setName("cardType");
		name.setContent(readBooking.getPayments()[0].getCardType());
		mergeVars.add(name);

		name = new MergeVar();
		name.setName("cardNumber");
		name.setContent(readBooking.getPayments()[0].getLastCardDigits());
		mergeVars.add(name);

		name = new MergeVar();
		name.setName("checkIn");
		name.setContent(readBooking.getStays()[0].getCheckIn());
		mergeVars.add(name);

		name = new MergeVar();
		name.setName("checkOut");
		name.setContent(readBooking.getStays()[0].getCheckOut());
		mergeVars.add(name);

		message.setGlobal_merge_vars(mergeVars);

		// Set merge language (*important)
		LOGGER.info("Set merge language ....................");
		message.setMerge_language("handlebars");

		// You must provide at least an empty template content
		Map<String, String> templateContent = new HashMap<>();

		// Send mail
		LOGGER.info("Send mail ....................");
		MandrillMessageStatus[] messageStatusReports = api.messages().sendTemplate("my_test_template", templateContent,
				message);
		if (messageStatusReports != null && messageStatusReports.length > 0) {
			LOGGER.info("Mail sent info: " + messageStatusReports[0].getStatus());
		}

	}

	/**
	 * 
	 * @param is
	 * @return
	 */
	private static String convertStreamToString(InputStream is) {

		BufferedReader reader = new BufferedReader(new InputStreamReader(is));
		StringBuilder sb = new StringBuilder();

		String line = null;
		try {
			while ((line = reader.readLine()) != null) {
				sb.append(line);
			}
		} catch (IOException e) {
			LOGGER.error("Error occured when convert email Stream for Error : {}", e.getMessage());

		} finally {
			try {
				is.close();
			} catch (IOException e) {
				LOGGER.error("Error occured when convert email Stream for Error : {}", e.getMessage());
			}
		}
		return sb.toString();
	}

}

