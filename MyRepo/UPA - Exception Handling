++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
====================================================================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<EXCEPTION HANDLING>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
====================================================================================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


// message DTO(to pass generic mesage for the client)<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
package com.noetic.common.v1.dto;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.io.Serializable;


@JsonIgnoreProperties(ignoreUnknown = true)
//@JsonInclude(Include.NON_NULL)
@JsonPropertyOrder({ "code", "message" })
public class MessageDTO implements Serializable{

    private static final long serialVersionUID = 3253076720968896892L;
    private String message;
    private String code;
    private String locale = "en_GB";
    private String system;
    private String systemErrorCode;
    private String systemErrorMessage;
    private String language;
    private String hashcode;

    public MessageDTO() {
    }

    /**
     *
     * @param message
     */
    public MessageDTO(String message) {
        this.message = message;
    }
    
    public MessageDTO(String message, String code) {
        this.message = message;
        this.code = code;
    }
    
    public MessageDTO(String message, String code, String locale) {
        this.message = message;
        this.code = code;
        this.locale = locale;
    }
    
    public MessageDTO(String message, String code, String locale, String system, String systemErrorCode,
                      String systemErrorMessage, String language, String hashcode) {
        this.message = message;
        this.code = code;
        this.locale = locale;
        this.system = system;
        this.systemErrorCode = systemErrorCode;
        this.systemErrorMessage = systemErrorMessage;
        this.language = language;
        this.hashcode = hashcode;
    }

    /**
     *
     * @return
     */
    public String getMessage() {
        return message;
    }

    /**
     *
     * @param message
     */
    public void setMessage(String message) {
        this.message = message;
    }

    public String getCode() {
        return code;
    }
  
    public void setCode(String code) {
        this.code = code;
    }

    public String getLocale() {
        return locale;
    }

    public void setLocale(String locale) {
        this.locale = locale;
    }

    public String getSystem() {
        return system;
    }

    public void setSystem(String system) {
        this.system = system;
    }

    public String getSystemErrorCode() {
        return systemErrorCode;
    }

    public void setSystemErrorCode(String systemErrorCode) {
        this.systemErrorCode = systemErrorCode;
    }

    public String getSystemErrorMessage() {
        return systemErrorMessage;
    }

    public void setSystemErrorMessage(String systemErrorMessage) {
        this.systemErrorMessage = systemErrorMessage;
    }

    public String getLanguage() {
        return language;
    }

    public void setLanguage(String language) {
       this.language = language;
    }

    public String getHashcode() {
        return hashcode;
    }

    public void setHashcode(String hashcode) {
        this.hashcode = hashcode;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append("MessageDTO [message=");
        builder.append(message);
        builder.append(", code=");
        builder.append(code);
        builder.append(", locale=");
        builder.append(locale);
        builder.append(", system=");
        builder.append(system);
        builder.append(", systemErrorCode=");
        builder.append(systemErrorCode);
        builder.append(", systemErrorMessage=");
        builder.append(systemErrorMessage);
        builder.append(", language=");
        builder.append(language);
        builder.append(", hashcode=");
        builder.append(hashcode);
        builder.append("]");
        return builder.toString();
    }

}


// Response DTO<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

package com.noetic.common.v1.dto;

import com.noetic.common.v1.enums.ResultStatus;
import org.springframework.http.HttpStatus;

import java.io.Serializable;


public class ResponseDTO<T> extends ResultsDTO implements Serializable {

    private T payloadDto;

    public ResponseDTO() {
    }

    public ResponseDTO(T payloadDto) {
        this.payloadDto = payloadDto;
    }

    public ResponseDTO(MessageDTO message, ResultStatus resultStatus, HttpStatus httpStatus, String httpCode,
                       T payloadDto) {
        super(message, resultStatus, httpStatus, httpCode);
        this.payloadDto = payloadDto;
    }

    public void setPayload(T payloadDto) {
        this.payloadDto = payloadDto;
    }

    public T getPayload() {
        return payloadDto;
    }

}



// Results DTO<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

package com.noetic.common.v1.dto;

import com.noetic.common.v1.enums.ResultStatus;
import io.swagger.annotations.ApiModelProperty;
import org.springframework.http.HttpStatus;

import java.io.Serializable;

public class ResultsDTO implements Serializable {

    @ApiModelProperty(
            notes = "Service message",
            position = 1)
    MessageDTO message;

    @ApiModelProperty(
            notes = "Result of the Response",
            position = 2)
    ResultStatus resultStatus;

    @ApiModelProperty(
            notes = "Http status of the Response",
            position = 3)
    HttpStatus httpStatus;

    @ApiModelProperty(
            notes = "Standard http code of the Response",
            position = 4)
    String httpCode;


    public ResultsDTO() {

    }

    public ResultsDTO(MessageDTO message, ResultStatus resultStatus, HttpStatus httpStatus, String httpCode) {
        this.message = message;
        this.resultStatus = resultStatus;
        this.httpStatus = httpStatus;
        this.httpCode = httpCode;
    }

    public ResultStatus getResultStatus() {
        return resultStatus;
    }

    public void setResultStatus(ResultStatus resultStatus) {
        this.resultStatus = resultStatus;
    }

    public HttpStatus getHttpStatus() {
        return httpStatus;
    }

    public void setHttpStatus(HttpStatus httpStatus) {
        this.httpStatus = httpStatus;
    }

    public MessageDTO getMessage() {
        return message;
    }

    public void setMessage(MessageDTO message) {
        this.message = message;
    }

    public String getHttpCode() {
        return httpCode;
    }

    public void setHttpCode(String httpCode) {
        this.httpCode = httpCode;

    }
}


//Result status enum<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

package com.noetic.common.v1.enums;

public enum ResultStatus {
    SUCCESSFUL,
    FAILED,
    WARNING, // adding a warning status for package movement implementation
    AWATING;
}


//Transaction logging exception<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

package com.noetic.exception;

public class TransactionLoggingException extends Exception {

    private static final long serialVersionUID = 1L;

    public TransactionLoggingException() {
        super();
    }

    public TransactionLoggingException(String message, Throwable cause, boolean enableSuppression,
                                       boolean writableStackTrace) {
        super(message, cause, enableSuppression, writableStackTrace);
    }

    public TransactionLoggingException(String message, Throwable cause) {
        super(message, cause);
    }

    public TransactionLoggingException(String message) {
        super(message);
    }

    public TransactionLoggingException(Throwable cause) {
        super(cause);
    }

}



//service layer<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  @Transactional
    public TransactionDetail updateTransaction(TransactionMaster transactionMaster, 
            UniversalPaymentRequest<?> request, String requestType, String paymentGateway) 
                    throws TransactionLoggingException {
        
        TransactionDetail transactionDetail = null;
        String noeticCustomerId = null;
        TransactionDetail transactionDetailSaved = null;
    
        if (paymentGateway.equals(PaymentProvider.ELAVON_REALEX.getPaymentGateway())) {
                        
            transactionDetail = setElavonTransactionDetailValues(transactionMaster, 
                    noeticCustomerId , request, requestType);
            
            if (transactionDetail != null) {
                transactionDetail.setTransactionMaster(transactionMaster);
                transactionDetailSaved = createTransactionDetail(transactionDetail);
            }else {
                throw new TransactionLoggingException("updateTransaction : Error saving transaction details");
            }
            
        }else if (paymentGateway.equals(PaymentProvider.THREEC_WEB2PAY.getPaymentGateway())) {
            
            transactionDetail = set3cTransactionDetailValues(transactionMaster, request, requestType);
            
            if (transactionDetail != null) {
                transactionDetail.setTransactionMaster(transactionMaster);
                transactionDetailSaved = createTransactionDetail(transactionDetail);
            }else {
                throw new TransactionLoggingException("updateTransaction: Error saving transaction details");
            }

        }
            
        return transactionDetailSaved;
    }


//controller<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

private static final Logger LOGGER = LoggerFactory.getLogger(TransactionLoggingResourceImpl.class);



    @Override
    public ResponseDTO<?> updateTransaction(@RequestHeader("X-Authorisation") String xAuthorisation,
                                            @PathVariable String id,
                                            @RequestBody TransactionMasterDTO transactionMasterDTO) {

        ResponseDTO<TransactionMasterDTO> response = new ResponseDTO<TransactionMasterDTO>();
        response.setResultStatus(ResultStatus.AWATING);
        TransactionMasterDTO result = null;
        String message = null;
        try {
            result = transactionLoggingService.update(id, transactionMasterDTO);
            response.setResultStatus(ResultStatus.SUCCESSFUL);
            response.setHttpStatus(HttpStatus.CREATED);
            LOGGER.debug(" Transaction Log updated {}", result.toString());

        } catch (TransactionLoggingException tx) {
            response.setResultStatus(ResultStatus.FAILED);
            response.setHttpStatus(HttpStatus.BAD_REQUEST);
            LOGGER.error("Transaction log updating {}, error {}", transactionMasterDTO.toString(), tx.getMessage());
            message = tx.getMessage();

        } catch (Exception e) {
            response.setResultStatus(ResultStatus.FAILED);
            response.setHttpStatus(HttpStatus.INTERNAL_SERVER_ERROR);
            LOGGER.error("Error requesting {}, error {}", transactionMasterDTO.toString(), e.getMessage());
            message = e.getMessage();
        } finally {
            response.setHttpCode(response.getHttpStatus() != null
                    ? response.getHttpStatus().toString() : null);
            MessageDTO messageDTO = new MessageDTO(message);
            response.setMessage(messageDTO);
            response.setPayload(result);
        }
        return response;
    }





